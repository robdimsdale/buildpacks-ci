package main_test

import (
	"fmt"
	main "github.com/cloudfoundry/buildpacks-ci/cve-notification-app/actions/update-tracked-deps/entrypoint"
	"github.com/cloudfoundry/buildpacks-ci/cve-notification-app/utils"
	"github.com/cloudfoundry/buildpacks-ci/cve-notification-app/utils/utilsfakes"
	"github.com/sclevine/spec"
	"testing"

	"github.com/sclevine/spec/report"
	assertpkg "github.com/stretchr/testify/assert"
	requirepkg "github.com/stretchr/testify/require"
)

func TestEntrypoint(t *testing.T) {
	spec.Run(t, "Entrypoint", testEntrypoint, spec.Report(report.Terminal{}))
}

func testEntrypoint(t *testing.T, context spec.G, it spec.S) {
	var (
		assert        = assertpkg.New(t)
		require       = requirepkg.New(t)
		allUtils      main.AllUtils
		fakeJSONUtils *utilsfakes.FakeJSONUtilsInterface
		fakeCSVUtils  *utilsfakes.FakeCSVUtilsInterface
		fakeNVDUtils  *utilsfakes.FakeNVDNistUtilsInterface
	)

	it.Before(func() {
		fakeJSONUtils = &utilsfakes.FakeJSONUtilsInterface{}
		fakeCSVUtils = &utilsfakes.FakeCSVUtilsInterface{}
		fakeNVDUtils = &utilsfakes.FakeNVDNistUtilsInterface{}

		allUtils = main.AllUtils{
			JSONUtils:    fakeJSONUtils,
			CSVUtils:     fakeCSVUtils,
			NVDNistUtils: fakeNVDUtils,
		}
	})

	context("Calls the UpdateTrackedDependencies method", func() {
		context("succeed", func() {
			it.Before(func() {
				fileDeps := []utils.DepList{
					{
						Vendor:  "cisco",
						Product: "appdynamics_iq",
					},
					{
						Vendor:  "golang",
						Product: "go",
					},
				}

				trackedDeps := []utils.DepList{
					{
						Vendor:  "haxx",
						Product: "curl",
					},
					{
						Vendor:  "golang",
						Product: "go",
					},
				}

				fakeCSVUtils.GetDependenciesListReturns(fileDeps, nil)

				fakeJSONUtils.GetRecordedDependenciesReturns(trackedDeps, nil)

				fakeJSONUtils.GetCVEListReturns(utils.CVEs{
					{
						Vendor:   "haxx",
						Product:  "curl",
						CVEId:    "CVE-1",
						Severity: "HIGH",
					},
					{
						Vendor:   "haxx",
						Product:  "curl",
						CVEId:    "CVE-2",
						Severity: "NONE",
					},
					{
						Vendor:   "go",
						Product:  "go",
						CVEId:    "CVE-3",
						Severity: "CRITICAL",
					},
				}, nil)

				cves := utils.GenerateFakeCVE([]utils.FakeCVEParam{
					{
						Id:          "CVE-4",
						Description: "Testing CVE1",
						Severity:    "HIGH",
					},
					{
						Id:          "CVE-5",
						Description: "Testing CVE2",
						Severity:    "LOW",
					},
				})

				fakeNVDUtils.GetCVEsReturns(cves, nil)

				fakeJSONUtils.GenerateJsonCVEFileReturns(nil)
			})

			it("Updates the tracked dependencies", func() {
				addedDependencies, removedDependencies, err := main.UpdateTrackedDependencies(allUtils)
				require.NoError(err)

				assert.Equal(1, len(addedDependencies))
				assert.Equal(1, len(removedDependencies))

				assert.Equal("appdynamics_iq", addedDependencies[0])
				assert.Equal("curl", removedDependencies[0])

				assert.Equal(1, fakeJSONUtils.GenerateJsonCVEFileCallCount())

				actualCves := fakeJSONUtils.GenerateJsonCVEFileArgsForCall(0)
				assert.Equal(3, actualCves.Len())
				assert.Equal(0, actualCves.Filter(func(cve utils.CVE) bool {
					return cve.CVEId == "CVE-1"
				}).Len())
				assert.Equal(1, actualCves.Filter(func(cve utils.CVE) bool {
					return cve.CVEId == "CVE-5"
				}).Len())
			})
		})
	})

	context("fails", func() {
		context("getting dependencies tracked", func() {
			it.Before(func() {
				fakeCSVUtils.GetDependenciesListReturns(nil, fmt.Errorf("dependencies"))
			})

			it("return an error", func() {
				_, _, err := main.UpdateTrackedDependencies(allUtils)
				require.Error(err)

				assert.Equal("dependencies", err.Error())
			})
		})

		context("getting recorded dependencies", func() {
			it.Before(func() {
				deps := []utils.DepList{
					{
						Vendor:  "cisco",
						Product: "appdynamics_iq",
					},
					{
						Vendor:  "haxx",
						Product: "curl",
					},
				}

				fakeCSVUtils.GetDependenciesListReturns(deps, nil)

				fakeJSONUtils.GetRecordedDependenciesReturns(nil, fmt.Errorf("recorded-dependencies"))
			})

			it("return an error", func() {
				_, _, err := main.UpdateTrackedDependencies(allUtils)
				require.Error(err)

				assert.Equal("recorded-dependencies", err.Error())
			})
		})

		context("modifying dependencies from track", func() {
			context("getting all CVE list", func() {
				it.Before(func() {
					fileDeps := []utils.DepList{
						{
							Vendor:  "cisco",
							Product: "appdynamics_iq",
						},
						{
							Vendor:  "haxx",
							Product: "curl",
						},
					}

					trackedDeps := []utils.DepList{
						{
							Vendor:  "cisco",
							Product: "appdynamics_iq",
						},
					}

					fakeCSVUtils.GetDependenciesListReturns(fileDeps, nil)

					fakeJSONUtils.GetRecordedDependenciesReturns(trackedDeps, nil)
					fakeJSONUtils.GetCVEListReturns(nil, fmt.Errorf("cve-list-error"))
				})

				it("return an error", func() {
					_, _, err := main.UpdateTrackedDependencies(allUtils)
					require.Error(err)

					assert.Equal("cve-list-error", err.Error())
				})
			})

			context("creating cves", func() {
				it.Before(func() {
					fileDeps := []utils.DepList{
						{
							Vendor:  "cisco",
							Product: "appdynamics_iq",
						},
						{
							Vendor:  "haxx",
							Product: "curl",
						},
					}

					trackedDeps := []utils.DepList{
						{
							Vendor:  "cisco",
							Product: "appdynamics_iq",
						},
					}

					fakeCSVUtils.GetDependenciesListReturns(fileDeps, nil)
					fakeJSONUtils.GetRecordedDependenciesReturns(trackedDeps, nil)
					fakeNVDUtils.GetCVEsReturns(utils.NVDNistResponse{}, fmt.Errorf("add-new-dependency"))
				})

				it("return an error", func() {
					_, _, err := main.UpdateTrackedDependencies(allUtils)
					require.Error(err)

					assert.Equal("add-new-dependency", err.Error())
				})
			})
		})

		context("generating the JSON file", func() {
			it.Before(func() {
				fileDeps := []utils.DepList{
					{
						Vendor:  "cisco",
						Product: "appdynamics_iq",
					},
				}

				trackedDeps := []utils.DepList{
					{
						Vendor:  "cisco",
						Product: "appdynamics_iq",
					},
					{
						Vendor:  "haxx",
						Product: "curl",
					},
				}

				fakeCSVUtils.GetDependenciesListReturns(fileDeps, nil)

				fakeJSONUtils.GetRecordedDependenciesReturns(trackedDeps, nil)
				fakeJSONUtils.GenerateJsonCVEFileReturns(fmt.Errorf("error-generating-json"))
			})

			it("return an error", func() {
				_, _, err := main.UpdateTrackedDependencies(allUtils)
				require.Error(err)

				assert.Equal("error-generating-json", err.Error())
			})
		})
	})
}
