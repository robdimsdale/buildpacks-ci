package main

import (
	"github.com/cloudfoundry/buildpacks-ci/cve-notification-app/utils"
	"github.com/jessevdk/go-flags"
	"log"
	"time"
)

type AllUtils struct {
	JSONUtils    utils.JSONUtilsInterface
	CSVUtils     utils.CSVUtilsInterface
	NVDNistUtils utils.NVDNistUtilsInterface
}

func main() {
	var opts struct {
		JSONFilePath string `long:"json-filepath" description:"CVEs JSON Filepath" required:"true"`
		DepList      string `long:"dep-list" description:"Path to dependencies.csv file" required:"true"`
	}

	_, err := flags.Parse(&opts)
	if err != nil {
		log.Fatal(err)
	}

	allUtils := AllUtils{
		utils.NewJSONUtils(opts.JSONFilePath),
		utils.NewCSVUtils(opts.DepList),
		utils.NewNVDNistUtils(),
	}

	err = GenerateActualCVEList(allUtils)
	if err != nil {
		log.Fatal(err)
	}
}

func GenerateActualCVEList(allUtils AllUtils) error {
	dependencies, err := allUtils.CSVUtils.GetDependenciesList()
	if err != nil {
		return err
	}

	allCves := utils.CVEs{}

	for _, dependency := range dependencies {
		nvdNistCves, err := allUtils.NVDNistUtils.GetCVEs(dependency.Vendor, dependency.Product)
		if err != nil {
			return err
		}

		for _, result := range nvdNistCves.Result.CVEItems {
			cve := utils.CVE{
				CreatedAt:   time.Now().Format(time.RFC3339),
				Vendor:      dependency.Vendor,
				Product:     dependency.Product,
				Severity:    result.Impact.BaseMetricV3.CvssV3.BaseSeverity,
				CVEId:       result.Cve.CVEDataMeta.ID,
				Description: result.Cve.Description.DescriptionData[0].Value,
			}

			allCves = append(allCves, cve)
		}
	}

	err = allUtils.JSONUtils.GenerateJsonCVEFile(allCves)
	if err != nil {
		return err
	}

	return nil
}
