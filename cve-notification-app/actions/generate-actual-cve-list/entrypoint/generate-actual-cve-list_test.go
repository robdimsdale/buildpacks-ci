package main_test

import (
	"fmt"
	main "github.com/cloudfoundry/buildpacks-ci/cve-notification-app/actions/generate-actual-cve-list/entrypoint"
	"github.com/cloudfoundry/buildpacks-ci/cve-notification-app/utils"
	"github.com/cloudfoundry/buildpacks-ci/cve-notification-app/utils/utilsfakes"
	"github.com/sclevine/spec"
	"testing"

	"github.com/sclevine/spec/report"
	assertpkg "github.com/stretchr/testify/assert"
	requirepkg "github.com/stretchr/testify/require"
)

func TestEntrypoint(t *testing.T) {
	spec.Run(t, "Entrypoint", testEntrypoint, spec.Report(report.Terminal{}))
}

func testEntrypoint(t *testing.T, context spec.G, it spec.S) {
	var (
		assert        = assertpkg.New(t)
		require       = requirepkg.New(t)
		allUtils      main.AllUtils
		fakeCSVUtils  *utilsfakes.FakeCSVUtilsInterface
		fakeNVDUtils  *utilsfakes.FakeNVDNistUtilsInterface
		fakeJsonUtils *utilsfakes.FakeJSONUtilsInterface
	)

	it.Before(func() {
		fakeCSVUtils = &utilsfakes.FakeCSVUtilsInterface{}
		fakeNVDUtils = &utilsfakes.FakeNVDNistUtilsInterface{}
		fakeJsonUtils = &utilsfakes.FakeJSONUtilsInterface{}

		allUtils = main.AllUtils{
			CSVUtils:     fakeCSVUtils,
			NVDNistUtils: fakeNVDUtils,
			JSONUtils:    fakeJsonUtils,
		}
	})

	context("Calls the GenerateActualCVEList method", func() {
		context("succeed", func() {
			it.Before(func() {
				deps := []utils.DepList{
					{
						Vendor:  "cisco",
						Product: "appdynamics_iq",
					},
					{
						Vendor:  "haxx",
						Product: "curl",
					},
				}

				fakeCSVUtils.GetDependenciesListReturns(deps, nil)

				cves1 := utils.GenerateFakeCVE([]utils.FakeCVEParam{
					{
						Id:          "CVE-1",
						Description: "Testing CVE1",
						Severity:    "HIGH",
					},
					{
						Id:          "CVE-2",
						Description: "Testing CVE2",
						Severity:    "LOW",
					},
				})

				cves2 := utils.NVDNistResponse{}

				fakeNVDUtils.GetCVEsReturnsOnCall(0, cves1, nil)
				fakeNVDUtils.GetCVEsReturnsOnCall(1, cves2, nil)

				fakeJsonUtils.GenerateJsonCVEFileReturns(nil)
			})

			it("Fills the database with all de dependencies CVEs", func() {

				err := main.GenerateActualCVEList(allUtils)
				require.NoError(err)

				generatedCves := fakeJsonUtils.GenerateJsonCVEFileArgsForCall(0)

				cve1 := generatedCves.Filter(func(cve utils.CVE) bool {
					return cve.CVEId == "CVE-1"
				})

				assert.Equal(1, len(cve1))
				assert.Equal("cisco", cve1[0].Vendor)
				assert.Equal("appdynamics_iq", cve1[0].Product)
				assert.Equal("CVE-1", cve1[0].CVEId)
				assert.Equal("Testing CVE1", cve1[0].Description)
				assert.Equal("HIGH", cve1[0].Severity)

				cve2 := generatedCves.Filter(func(cve utils.CVE) bool {
					return cve.CVEId == "CVE-2"
				})

				assert.Equal(1, len(cve2))
				assert.Equal("cisco", cve2[0].Vendor)
				assert.Equal("appdynamics_iq", cve2[0].Product)
				assert.Equal("CVE-2", cve2[0].CVEId)
				assert.Equal("Testing CVE2", cve2[0].Description)
				assert.Equal("LOW", cve2[0].Severity)
			})
		})

		context("fails", func() {
			context("getting dependencies list", func() {
				it.Before(func() {
					fakeCSVUtils.GetDependenciesListReturns(nil, fmt.Errorf("dependencies"))
				})

				it("return an error", func() {
					err := main.GenerateActualCVEList(allUtils)
					require.Error(err)

					assert.Error(err, "dependencies")
				})
			})

			context("getting CVEs", func() {
				it.Before(func() {
					deps := []utils.DepList{
						{
							Vendor:  "cisco",
							Product: "appdynamics_iq",
						},
						{
							Vendor:  "haxx",
							Product: "curl",
						},
					}

					fakeCSVUtils.GetDependenciesListReturns(deps, nil)

					fakeNVDUtils.GetCVEsReturns(utils.NVDNistResponse{}, fmt.Errorf("cves"))

				})

				it("return an error", func() {
					err := main.GenerateActualCVEList(allUtils)
					require.Error(err)

					assert.Error(err, "cves")
				})
			})

			context("generating CVE JSON file", func() {
				it.Before(func() {
					deps := []utils.DepList{
						{
							Vendor:  "cisco",
							Product: "appdynamics_iq",
						},
						{
							Vendor:  "haxx",
							Product: "curl",
						},
					}

					fakeCSVUtils.GetDependenciesListReturns(deps, nil)

					cves := utils.GenerateFakeCVE([]utils.FakeCVEParam{
						{
							Id:          "CVE-1",
							Description: "Testing CVE1",
							Severity:    "HIGH",
						},
						{
							Id:          "CVE-2",
							Description: "Testing CVE2",
							Severity:    "LOW",
						},
					})

					fakeNVDUtils.GetCVEsReturns(cves, nil)

					fakeJsonUtils.GenerateJsonCVEFileReturns(fmt.Errorf("create-cve"))
				})

				it("return an error", func() {
					err := main.GenerateActualCVEList(allUtils)
					require.Error(err)

					assert.Error(err, "create-cve")
				})
			})
		})
	})

}
