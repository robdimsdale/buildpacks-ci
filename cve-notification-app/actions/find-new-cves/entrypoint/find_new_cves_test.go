package main_test

import (
	"fmt"
	main "github.com/cloudfoundry/buildpacks-ci/cve-notification-app/actions/find-new-cves/entrypoint"
	"github.com/cloudfoundry/buildpacks-ci/cve-notification-app/utils"
	"github.com/cloudfoundry/buildpacks-ci/cve-notification-app/utils/utilsfakes"
	"github.com/sclevine/spec"
	"github.com/sclevine/spec/report"
	"github.com/spf13/afero"
	assertpkg "github.com/stretchr/testify/assert"
	requirepkg "github.com/stretchr/testify/require"
	"testing"
	"time"
)

func TestEntrypoint(t *testing.T) {
	spec.Run(t, "Entrypoint", testEntrypoint, spec.Report(report.Terminal{}))
}

func testEntrypoint(t *testing.T, context spec.G, it spec.S) {
	var (
		assert         = assertpkg.New(t)
		require        = requirepkg.New(t)
		allUtils       main.AllUtils
		fakeJsonUtils  *utilsfakes.FakeJSONUtilsInterface
		fakeNVDUtils   *utilsfakes.FakeNVDNistUtilsInterface
		fakeSlackUtils *utilsfakes.FakeSlackUtilsInterface
		fakeCSVUtils   *utilsfakes.FakeCSVUtilsInterface
	)

	it.Before(func() {
		fakeJsonUtils = &utilsfakes.FakeJSONUtilsInterface{}
		fakeNVDUtils = &utilsfakes.FakeNVDNistUtilsInterface{}
		fakeSlackUtils = &utilsfakes.FakeSlackUtilsInterface{}
		fakeCSVUtils = &utilsfakes.FakeCSVUtilsInterface{}

		allUtils = main.AllUtils{
			JSONUtils:    fakeJsonUtils,
			NVDNistUtils: fakeNVDUtils,
			SlackUtils:   fakeSlackUtils,
			CSVUtils:     fakeCSVUtils,
			FileSystem:   afero.NewMemMapFs(),
		}
	})

	context("Calls the FindNewCVEs method", func() {
		context("succeed", func() {
			context("with new CVEs", func() {
				it.Before(func() {
					trackedDeps := []utils.DepList{
						{
							Vendor:  "haxx",
							Product: "curl",
						},
						{
							Vendor:  "golang",
							Product: "go",
						},
					}

					fakeCSVUtils.GetDependenciesListReturns(trackedDeps, nil)

					recordedCves := utils.CVEs{
						{
							CreatedAt:   time.Now().Format(time.RFC3339),
							Vendor:      "haxx",
							Product:     "curl",
							Severity:    "HIGH",
							CVEId:       "CVE-1",
							Description: "Testing CVE1",
						},
						{
							CreatedAt:   time.Now().Format(time.RFC3339),
							Vendor:      "golang",
							Product:     "go",
							Severity:    "CRITICAL",
							CVEId:       "CVE-3",
							Description: "Testing CVE3",
						},
					}

					fakeJsonUtils.GetCVEListReturns(recordedCves, nil)

					cves := utils.GenerateFakeCVE([]utils.FakeCVEParam{
						{
							Id:          "CVE-1",
							Description: "Testing CVE1",
							Severity:    "HIGH",
						},
						{
							Id:          "CVE-2",
							Description: "Testing CVE2",
							Severity:    "LOW",
						},
					})

					cves2 := utils.GenerateFakeCVE([]utils.FakeCVEParam{
						{
							Id:          "CVE-3",
							Description: "Testing CVE3",
							Severity:    "CRITICAL",
						},
						{
							Id:          "CVE-4",
							Description: "Testing CVE4",
							Severity:    "CRITICAL",
						},
					})

					fakeNVDUtils.GetCVEsReturnsOnCall(0, cves, nil)
					fakeNVDUtils.GetCVEsReturnsOnCall(1, cves2, nil)

					fakeSlackUtils.SendNewCVENotificationReturns(nil)
				})

				it("Finds new cves for the tracked dependencies", func() {

					newCve, err := main.FindNewCVEs(allUtils)
					require.NoError(err)
					assert.True(newCve)

					generatedCves := fakeJsonUtils.GenerateJsonCVEFileArgsForCall(0)

					cve2 := generatedCves.Filter(func(cve utils.CVE) bool {
						return cve.CVEId == "CVE-2"
					})

					assert.Equal(1, len(cve2))
					assert.Equal("haxx", cve2[0].Vendor)
					assert.Equal("haxx", cve2[0].Vendor)
					assert.Equal("curl", cve2[0].Product)
					assert.Equal("LOW", cve2[0].Severity)
					assert.Equal("CVE-2", cve2[0].CVEId)
					assert.Equal("Testing CVE2", cve2[0].Description)

					cve4 := generatedCves.Filter(func(cve utils.CVE) bool {
						return cve.CVEId == "CVE-4"
					})

					assert.Equal(1, len(cve4))
					assert.Equal("golang", cve4[0].Vendor)
					assert.Equal("go", cve4[0].Product)
					assert.Equal("CRITICAL", cve4[0].Severity)
					assert.Equal("CVE-4", cve4[0].CVEId)
					assert.Equal("Testing CVE4", cve4[0].Description)

					assert.Equal(2, fakeSlackUtils.SendNewCVENotificationCallCount())

					product, id, description, severity := fakeSlackUtils.SendNewCVENotificationArgsForCall(0)
					assert.Equal("curl", product)
					assert.Equal("CVE-2", id)
					assert.Equal("Testing CVE2", description)
					assert.Equal("LOW", severity)

					product2, id2, description2, severity2 := fakeSlackUtils.SendNewCVENotificationArgsForCall(1)
					assert.Equal("go", product2)
					assert.Equal("CVE-4", id2)
					assert.Equal("Testing CVE4", description2)
					assert.Equal("CRITICAL", severity2)

					assert.Equal(true, newCve)
				})
			})

			context("without new CVEs", func() {
				it.Before(func() {
					trackedDeps := []utils.DepList{
						{
							Vendor:  "haxx",
							Product: "curl",
						},
						{
							Vendor:  "golang",
							Product: "go",
						},
					}

					fakeCSVUtils.GetDependenciesListReturns(trackedDeps, nil)

					recordedCves := utils.CVEs{
						{
							CreatedAt:   time.Now().Format(time.RFC3339),
							Vendor:      "haxx",
							Product:     "curl",
							Severity:    "HIGH",
							CVEId:       "CVE-1",
							Description: "Testing CVE1",
						},
						{
							CreatedAt:   time.Now().Format(time.RFC3339),
							Vendor:      "golang",
							Product:     "go",
							Severity:    "CRITICAL",
							CVEId:       "CVE-3",
							Description: "Testing CVE3",
						},
					}

					fakeJsonUtils.GetCVEListReturns(recordedCves, nil)

					cves := utils.GenerateFakeCVE([]utils.FakeCVEParam{
						{
							Id:          "CVE-1",
							Description: "Testing CVE1",
							Severity:    "HIGH",
						},
					})

					cves2 := utils.GenerateFakeCVE([]utils.FakeCVEParam{
						{
							Id:          "CVE-3",
							Description: "Testing CVE3",
							Severity:    "CRITICAL",
						},
					})

					fakeNVDUtils.GetCVEsReturnsOnCall(0, cves, nil)
					fakeNVDUtils.GetCVEsReturnsOnCall(1, cves2, nil)
					fakeSlackUtils.SendNewCVENotificationReturns(nil)
				})

				it("Did not find new cves for the tracked dependencies", func() {
					newCve, err := main.FindNewCVEs(allUtils)
					require.NoError(err)

					assert.Equal(0, fakeSlackUtils.SendNewCVENotificationCallCount())
					assert.Equal(0, fakeJsonUtils.GenerateJsonCVEFileCallCount())

					assert.Equal(false, newCve)
				})
			})
		})

		context("fails", func() {
			context("getting tracked dependencies", func() {
				it.Before(func() {
					fakeCSVUtils.GetDependenciesListReturns(nil, fmt.Errorf("unique-dependencies"))
				})

				it("return an error", func() {
					_, err := main.FindNewCVEs(allUtils)
					require.Error(err)

					assert.Error(err, "unique-dependencies")
				})
			})

			context("getting recorded CVEs", func() {
				it.Before(func() {
					trackedDeps := []utils.DepList{
						{
							Vendor:  "haxx",
							Product: "curl",
						},
						{
							Vendor:  "golang",
							Product: "go",
						},
					}

					fakeCSVUtils.GetDependenciesListReturns(trackedDeps, nil)

					fakeJsonUtils.GetCVEListReturns(nil, fmt.Errorf("cves"))
				})

				it("return an error", func() {
					_, err := main.FindNewCVEs(allUtils)
					require.Error(err)

					assert.Error(err, "cves")
				})
			})

			context("getting NVD Nist CVEs", func() {
				it.Before(func() {
					trackedDeps := []utils.DepList{
						{
							Vendor:  "haxx",
							Product: "curl",
						},
						{
							Vendor:  "golang",
							Product: "go",
						},
					}

					fakeCSVUtils.GetDependenciesListReturns(trackedDeps, nil)

					recordedCves := utils.CVEs{
						{
							CreatedAt:   time.Now().Format(time.RFC3339),
							Vendor:      "haxx",
							Product:     "curl",
							Severity:    "HIGH",
							CVEId:       "CVE-1",
							Description: "Testing CVE1",
						},
						{
							CreatedAt:   time.Now().Format(time.RFC3339),
							Vendor:      "golang",
							Product:     "go",
							Severity:    "CRITICAL",
							CVEId:       "CVE-3",
							Description: "Testing CVE3",
						},
					}

					fakeJsonUtils.GetCVEListReturns(recordedCves, nil)

					fakeNVDUtils.GetCVEsReturns(utils.NVDNistResponse{}, fmt.Errorf("nvd-nist-error"))
				})

				it("return an error", func() {
					_, err := main.FindNewCVEs(allUtils)
					require.Error(err)

					assert.Error(err, "nvd-nist-error")
				})
			})

			context("sending slack message", func() {
				it.Before(func() {
					trackedDeps := []utils.DepList{
						{
							Vendor:  "haxx",
							Product: "curl",
						},
						{
							Vendor:  "golang",
							Product: "go",
						},
					}

					fakeCSVUtils.GetDependenciesListReturns(trackedDeps, nil)

					recordedCves := utils.CVEs{
						{
							CreatedAt:   time.Now().Format(time.RFC3339),
							Vendor:      "haxx",
							Product:     "curl",
							Severity:    "HIGH",
							CVEId:       "CVE-1",
							Description: "Testing CVE1",
						},
						{
							CreatedAt:   time.Now().Format(time.RFC3339),
							Vendor:      "golang",
							Product:     "go",
							Severity:    "CRITICAL",
							CVEId:       "CVE-3",
							Description: "Testing CVE3",
						},
					}

					fakeJsonUtils.GetCVEListReturns(recordedCves, nil)

					cves := utils.GenerateFakeCVE([]utils.FakeCVEParam{
						{
							Id:          "CVE-1",
							Description: "Testing CVE1",
							Severity:    "HIGH",
						},
						{
							Id:          "CVE-2",
							Description: "Testing CVE2",
							Severity:    "LOW",
						},
					})

					cves2 := utils.GenerateFakeCVE([]utils.FakeCVEParam{
						{
							Id:          "CVE-3",
							Description: "Testing CVE3",
							Severity:    "CRITICAL",
						},
						{
							Id:          "CVE-4",
							Description: "Testing CVE4",
							Severity:    "CRITICAL",
						},
					})

					fakeNVDUtils.GetCVEsReturnsOnCall(0, cves, nil)
					fakeNVDUtils.GetCVEsReturnsOnCall(1, cves2, nil)

					fakeSlackUtils.SendNewCVENotificationReturns(fmt.Errorf("slack-notification-error"))
				})

				it("return an error", func() {
					_, err := main.FindNewCVEs(allUtils)
					require.Error(err)

					assert.Error(err, "slack-notification-error")
				})
			})

			context("generating CVEs json", func() {
				it.Before(func() {
					trackedDeps := []utils.DepList{
						{
							Vendor:  "haxx",
							Product: "curl",
						},
						{
							Vendor:  "golang",
							Product: "go",
						},
					}

					fakeCSVUtils.GetDependenciesListReturns(trackedDeps, nil)

					recordedCves := utils.CVEs{
						{
							CreatedAt:   time.Now().Format(time.RFC3339),
							Vendor:      "haxx",
							Product:     "curl",
							Severity:    "HIGH",
							CVEId:       "CVE-1",
							Description: "Testing CVE1",
						},
						{
							CreatedAt:   time.Now().Format(time.RFC3339),
							Vendor:      "golang",
							Product:     "go",
							Severity:    "CRITICAL",
							CVEId:       "CVE-3",
							Description: "Testing CVE3",
						},
					}

					fakeJsonUtils.GetCVEListReturns(recordedCves, nil)

					cves := utils.GenerateFakeCVE([]utils.FakeCVEParam{
						{
							Id:          "CVE-1",
							Description: "Testing CVE1",
							Severity:    "HIGH",
						},
						{
							Id:          "CVE-2",
							Description: "Testing CVE2",
							Severity:    "LOW",
						},
					})

					cves2 := utils.GenerateFakeCVE([]utils.FakeCVEParam{
						{
							Id:          "CVE-3",
							Description: "Testing CVE3",
							Severity:    "CRITICAL",
						},
						{
							Id:          "CVE-4",
							Description: "Testing CVE4",
							Severity:    "CRITICAL",
						},
					})

					fakeNVDUtils.GetCVEsReturnsOnCall(0, cves, nil)
					fakeNVDUtils.GetCVEsReturnsOnCall(1, cves2, nil)

					fakeSlackUtils.SendNewCVENotificationReturns(nil)

					fakeJsonUtils.GenerateJsonCVEFileReturns(fmt.Errorf("generate-json-file"))
				})

				it("return an error", func() {
					_, err := main.FindNewCVEs(allUtils)
					require.Error(err)

					assert.Error(err, "generate-json-file")
				})
			})
		})
	})
}
