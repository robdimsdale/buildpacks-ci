package utils

import (
	"encoding/json"
	"fmt"
	"github.com/spf13/afero"
)

//go:generate go run github.com/maxbrunsfeld/counterfeiter/v6 . JSONUtilsInterface
type JSONUtilsInterface interface {
	GetCVEList() (CVEs, error)
	GenerateJsonCVEFile(cves CVEs) error
	GetRecordedDependencies() ([]DepList, error)
}

//go:generate pie CVEs.*
type CVEs []CVE

type CVE struct {
	CreatedAt   string `bson:"created_at"`
	Vendor      string `bson:"vendor"`
	Product     string `bson:"product"`
	Severity    string `bson:"severity"`
	CVEId       string `bson:"cve_id"`
	Description string `bson:"description"`
}

type JSONUtils struct {
	FilePath   string
	FileSystem afero.Fs
}

func NewJSONUtils(filePath string) JSONUtils {
	return JSONUtils{filePath, afero.NewOsFs()}
}

func (jsonU JSONUtils) GetCVEList() (CVEs, error) {
	var CVEList CVEs

	allCves := map[string]CVEs{}

	jsonFile, err := afero.ReadFile(jsonU.FileSystem, jsonU.FilePath)
	if err != nil {
		return CVEs{}, err
	}

	err = json.Unmarshal(jsonFile, &allCves)
	if err != nil {
		return nil, err
	}

	for _, cves := range allCves {
		CVEList = append(CVEList, cves...)
	}

	return CVEList, nil
}

func (jsonU JSONUtils) GetRecordedDependencies() ([]DepList, error) {
	var recordedDependencies []DepList

	allCves := map[string]CVEs{}

	jsonFile, err := afero.ReadFile(jsonU.FileSystem, jsonU.FilePath)
	if err != nil {
		return nil, err
	}

	err = json.Unmarshal(jsonFile, &allCves)
	if err != nil {
		return nil, err
	}

	for dependency, cves := range allCves {
		recordedDependencies = append(recordedDependencies, DepList{cves[0].Vendor, dependency})
	}

	return recordedDependencies, nil
}

func (jsonU JSONUtils) GenerateJsonCVEFile(cves CVEs) error {

	result := make(map[string]CVEs)

	for _, cve := range cves {
		result[cve.Product] = append(result[cve.Product], cve)
	}

	jsonBytes, err := json.Marshal(result)
	if err != nil {
		return fmt.Errorf("error marshaling json object\n%w", err)
	}

	err = afero.WriteFile(jsonU.FileSystem, jsonU.FilePath, jsonBytes, 0644)
	if err != nil {
		return fmt.Errorf("error creating cves.json file\n%w", err)
	}

	return nil
}
