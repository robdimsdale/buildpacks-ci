// Code generated by counterfeiter. DO NOT EDIT.
package utilsfakes

import (
	"sync"

	"github.com/cloudfoundry/buildpacks-ci/cve-notification-app/utils"
)

type FakeJSONUtilsInterface struct {
	GenerateJsonCVEFileStub        func(utils.CVEs) error
	generateJsonCVEFileMutex       sync.RWMutex
	generateJsonCVEFileArgsForCall []struct {
		arg1 utils.CVEs
	}
	generateJsonCVEFileReturns struct {
		result1 error
	}
	generateJsonCVEFileReturnsOnCall map[int]struct {
		result1 error
	}
	GetCVEListStub        func() (utils.CVEs, error)
	getCVEListMutex       sync.RWMutex
	getCVEListArgsForCall []struct {
	}
	getCVEListReturns struct {
		result1 utils.CVEs
		result2 error
	}
	getCVEListReturnsOnCall map[int]struct {
		result1 utils.CVEs
		result2 error
	}
	GetRecordedDependenciesStub        func() ([]utils.DepList, error)
	getRecordedDependenciesMutex       sync.RWMutex
	getRecordedDependenciesArgsForCall []struct {
	}
	getRecordedDependenciesReturns struct {
		result1 []utils.DepList
		result2 error
	}
	getRecordedDependenciesReturnsOnCall map[int]struct {
		result1 []utils.DepList
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeJSONUtilsInterface) GenerateJsonCVEFile(arg1 utils.CVEs) error {
	fake.generateJsonCVEFileMutex.Lock()
	ret, specificReturn := fake.generateJsonCVEFileReturnsOnCall[len(fake.generateJsonCVEFileArgsForCall)]
	fake.generateJsonCVEFileArgsForCall = append(fake.generateJsonCVEFileArgsForCall, struct {
		arg1 utils.CVEs
	}{arg1})
	stub := fake.GenerateJsonCVEFileStub
	fakeReturns := fake.generateJsonCVEFileReturns
	fake.recordInvocation("GenerateJsonCVEFile", []interface{}{arg1})
	fake.generateJsonCVEFileMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeJSONUtilsInterface) GenerateJsonCVEFileCallCount() int {
	fake.generateJsonCVEFileMutex.RLock()
	defer fake.generateJsonCVEFileMutex.RUnlock()
	return len(fake.generateJsonCVEFileArgsForCall)
}

func (fake *FakeJSONUtilsInterface) GenerateJsonCVEFileCalls(stub func(utils.CVEs) error) {
	fake.generateJsonCVEFileMutex.Lock()
	defer fake.generateJsonCVEFileMutex.Unlock()
	fake.GenerateJsonCVEFileStub = stub
}

func (fake *FakeJSONUtilsInterface) GenerateJsonCVEFileArgsForCall(i int) utils.CVEs {
	fake.generateJsonCVEFileMutex.RLock()
	defer fake.generateJsonCVEFileMutex.RUnlock()
	argsForCall := fake.generateJsonCVEFileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeJSONUtilsInterface) GenerateJsonCVEFileReturns(result1 error) {
	fake.generateJsonCVEFileMutex.Lock()
	defer fake.generateJsonCVEFileMutex.Unlock()
	fake.GenerateJsonCVEFileStub = nil
	fake.generateJsonCVEFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeJSONUtilsInterface) GenerateJsonCVEFileReturnsOnCall(i int, result1 error) {
	fake.generateJsonCVEFileMutex.Lock()
	defer fake.generateJsonCVEFileMutex.Unlock()
	fake.GenerateJsonCVEFileStub = nil
	if fake.generateJsonCVEFileReturnsOnCall == nil {
		fake.generateJsonCVEFileReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.generateJsonCVEFileReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeJSONUtilsInterface) GetCVEList() (utils.CVEs, error) {
	fake.getCVEListMutex.Lock()
	ret, specificReturn := fake.getCVEListReturnsOnCall[len(fake.getCVEListArgsForCall)]
	fake.getCVEListArgsForCall = append(fake.getCVEListArgsForCall, struct {
	}{})
	stub := fake.GetCVEListStub
	fakeReturns := fake.getCVEListReturns
	fake.recordInvocation("GetCVEList", []interface{}{})
	fake.getCVEListMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeJSONUtilsInterface) GetCVEListCallCount() int {
	fake.getCVEListMutex.RLock()
	defer fake.getCVEListMutex.RUnlock()
	return len(fake.getCVEListArgsForCall)
}

func (fake *FakeJSONUtilsInterface) GetCVEListCalls(stub func() (utils.CVEs, error)) {
	fake.getCVEListMutex.Lock()
	defer fake.getCVEListMutex.Unlock()
	fake.GetCVEListStub = stub
}

func (fake *FakeJSONUtilsInterface) GetCVEListReturns(result1 utils.CVEs, result2 error) {
	fake.getCVEListMutex.Lock()
	defer fake.getCVEListMutex.Unlock()
	fake.GetCVEListStub = nil
	fake.getCVEListReturns = struct {
		result1 utils.CVEs
		result2 error
	}{result1, result2}
}

func (fake *FakeJSONUtilsInterface) GetCVEListReturnsOnCall(i int, result1 utils.CVEs, result2 error) {
	fake.getCVEListMutex.Lock()
	defer fake.getCVEListMutex.Unlock()
	fake.GetCVEListStub = nil
	if fake.getCVEListReturnsOnCall == nil {
		fake.getCVEListReturnsOnCall = make(map[int]struct {
			result1 utils.CVEs
			result2 error
		})
	}
	fake.getCVEListReturnsOnCall[i] = struct {
		result1 utils.CVEs
		result2 error
	}{result1, result2}
}

func (fake *FakeJSONUtilsInterface) GetRecordedDependencies() ([]utils.DepList, error) {
	fake.getRecordedDependenciesMutex.Lock()
	ret, specificReturn := fake.getRecordedDependenciesReturnsOnCall[len(fake.getRecordedDependenciesArgsForCall)]
	fake.getRecordedDependenciesArgsForCall = append(fake.getRecordedDependenciesArgsForCall, struct {
	}{})
	stub := fake.GetRecordedDependenciesStub
	fakeReturns := fake.getRecordedDependenciesReturns
	fake.recordInvocation("GetRecordedDependencies", []interface{}{})
	fake.getRecordedDependenciesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeJSONUtilsInterface) GetRecordedDependenciesCallCount() int {
	fake.getRecordedDependenciesMutex.RLock()
	defer fake.getRecordedDependenciesMutex.RUnlock()
	return len(fake.getRecordedDependenciesArgsForCall)
}

func (fake *FakeJSONUtilsInterface) GetRecordedDependenciesCalls(stub func() ([]utils.DepList, error)) {
	fake.getRecordedDependenciesMutex.Lock()
	defer fake.getRecordedDependenciesMutex.Unlock()
	fake.GetRecordedDependenciesStub = stub
}

func (fake *FakeJSONUtilsInterface) GetRecordedDependenciesReturns(result1 []utils.DepList, result2 error) {
	fake.getRecordedDependenciesMutex.Lock()
	defer fake.getRecordedDependenciesMutex.Unlock()
	fake.GetRecordedDependenciesStub = nil
	fake.getRecordedDependenciesReturns = struct {
		result1 []utils.DepList
		result2 error
	}{result1, result2}
}

func (fake *FakeJSONUtilsInterface) GetRecordedDependenciesReturnsOnCall(i int, result1 []utils.DepList, result2 error) {
	fake.getRecordedDependenciesMutex.Lock()
	defer fake.getRecordedDependenciesMutex.Unlock()
	fake.GetRecordedDependenciesStub = nil
	if fake.getRecordedDependenciesReturnsOnCall == nil {
		fake.getRecordedDependenciesReturnsOnCall = make(map[int]struct {
			result1 []utils.DepList
			result2 error
		})
	}
	fake.getRecordedDependenciesReturnsOnCall[i] = struct {
		result1 []utils.DepList
		result2 error
	}{result1, result2}
}

func (fake *FakeJSONUtilsInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.generateJsonCVEFileMutex.RLock()
	defer fake.generateJsonCVEFileMutex.RUnlock()
	fake.getCVEListMutex.RLock()
	defer fake.getCVEListMutex.RUnlock()
	fake.getRecordedDependenciesMutex.RLock()
	defer fake.getRecordedDependenciesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeJSONUtilsInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ utils.JSONUtilsInterface = new(FakeJSONUtilsInterface)
